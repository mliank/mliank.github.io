<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mliank.github.io/</id>
    <title>Super Lee</title>
    <updated>2020-11-17T10:07:55.830Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mliank.github.io/"/>
    <link rel="self" href="https://mliank.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mliank.github.io/images/avatar.png</logo>
    <icon>https://mliank.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Super Lee</rights>
    <entry>
        <title type="html"><![CDATA[Django2.0:全局配置settings详解]]></title>
        <id>https://mliank.github.io/GPdEUPDGf/</id>
        <link href="https://mliank.github.io/GPdEUPDGf/">
        </link>
        <updated>2020-06-04T09:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>Django设置文件包含你所有的Django安装配置。这个文件一般在你的项目文件夹里。比如我们创建了一个名为mysite的项目，那么这个配置文件setting.py就在项目里的mysite文件夹里。</p>
<p>下面列表一些常用的settings配置供参考。</p>
<p>1.配置静态文件</p>
<pre><code>#STATIC_URL = '/static/'为静态文件别名
STATIC_URL = '/static/'
#静态文件地址拼接，后面'static'文件为自己建立的存放静态文件（JS，IMG，CSS）的文件名
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'), #主文件下静态文件
    os.path.join(BASE_DIR,&quot;blog&quot;,&quot;statics&quot;),#项目blog文件下静态文件
)
</code></pre>
<p>2、mysql数据库配置</p>
<pre><code>########在setting原来默认的sqlite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
############修改成mysql如下
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',    #你的数据库名称
        'USER': 'root',   #你的数据库用户名
        'PASSWORD': '19941028', #你的数据库密码
        'HOST': '', #你的数据库主机，留空默认为localhost
        'PORT': '3306', #你的数据库端口
    }}
#由于mysql默认引擎为MySQLdb，在__init__.py文件中添加下面代码
#在python3中须替换为pymysql,可在主配置文件（和项目同名的文件下，不是app配置文件）中增加如下代码
import pymysql
pymysql.install_as_MySQLdb()
#如果找不到pymysql板块，则通过pip install pymysql进行安装。
</code></pre>
<p>3、设置打印日志到屏幕</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    }
}
</code></pre>
<p>4、语言</p>
<pre><code>LANGUAGE_CODE = 'en-us'# 默认
LANGUAGE_CODE = 'zh-hans'# 改为中文，主要针对admin页面
</code></pre>
<p>5、配置模板路径</p>
<pre><code>TEMPLATE_DIRS = (
        os.path.join(BASE_DIR,'templates'),
    )
#然后在项目根目录下添加templates文件夹
</code></pre>
<p>6、注册APP</p>
<pre><code>INSTALLED_APPS = [
 'django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'app1.apps.App1Config', 
 # 默认已有 如果没有只要添加app名称即可 例如： 'blog'
 # 新建的应用都要在这里添加
]
</code></pre>
<p>7、sql语句</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    }
}　
</code></pre>
<p>当你的操作与数据库相关时 会将我们的写的语句翻译成sql语句在服务端打印。</p>
<p>8、如果数据库中的UserInfo(用户表)继承django内置AbstractUser</p>
<p>1）model需导入</p>
<p><code>from django.contrib.auth.models import AbstractUser</code><br>
2）Settings文件里添加</p>
<p><code>AUTH_USER_MODEL = &quot;应用名.UserInfo&quot;</code><br>
9、中间件，自己写的中间件，例如在项目中的md文件夹下md.py文件中的M1与M2两个中间件</p>
<pre><code>MIDDLEWARE = [
 'django.middleware.security.SecurityMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware',
 'md.md.M1',
 'md.md.M2',
]
</code></pre>
<p>需要注意的是自己写的中间件，配置要写在系统中的后面</p>
<p>10、session存储的相关配置</p>
<p>1）数据库配置（默认）</p>
<pre><code>Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。
配置 settings.py
 SESSION_ENGINE = 'django.contrib.sessions.backends.db' # 引擎（默认）
 SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
 SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径（默认）
 SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名（默认）
 SESSION_COOKIE_SECURE = False    # 是否Https传输cookie（默认）
 SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输（默认）
 SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）（默认）
 SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期（默认）
 SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存（默认）
</code></pre>
<p>2）缓存配置</p>
<pre><code>配置 settings.py
 SESSION_ENGINE = 'django.contrib.sessions.backends.cache' # 引擎
 SESSION_CACHE_ALIAS = 'default'    # 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置
 SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串
 SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径
 SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名
 SESSION_COOKIE_SECURE = False    # 是否Https传输cookie
 SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输
 SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）
 SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期
 SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存
</code></pre>
<p>3）默认配置</p>
<pre><code>配置 settings.py
 SESSION_ENGINE = 'django.contrib.sessions.backends.file' # 引擎
 SESSION_FILE_PATH = None     # 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() 
 SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;    # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串
 SESSION_COOKIE_PATH ＝ &quot;/&quot;     # Session的cookie保存的路径
 SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名
 SESSION_COOKIE_SECURE = False    # 是否Https传输cookie
 SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输
 SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）
 SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期
 SESSION_SAVE_EVERY_REQUEST = False    # 是否每次请求都保存Session，默认修改之后才保存
</code></pre>
<p>注意：<br>
1）也可以自定义配置 但是自定义的配置都要写到配置文件最后 代码中使用时可以导入配置</p>
<pre><code>from django.conf import settings
settings.配置名
</code></pre>
<p>2）上面所有配置都是针对特定问题需要修改的，系统默认配置不做说明<br>
3）上面配置只是前面django入门教程所遇到的常用配置 后续所遇配置都会逐步在此教程中持续添加跟新</p>
<p>11、配置文件上传目录</p>
<pre><code>#设置文件上传路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
</code></pre>
<p>如果想在浏览器里访问自己上传的文件则需要在urls.py做如下设置：</p>
<p>from django.views.static import serve<br>
from django.conf import settings</p>
<p>urlpatterns = [<br>
...<br>
re_path('^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT}),<br>
]<br>
下面看段django settings最佳配置实例代码，具体代码如下所示：</p>
<p>import os<br>
import socket<br>
SITE_ID = 1</p>
<h1 id="项目的根目录">项目的根目录</h1>
<h1 id="简化后面的操作">简化后面的操作</h1>
<p>PROJECT_ROOT = os.path.dirname(os.path.dirname(<strong>file</strong>))</p>
<h1 id="加载应用">加载应用</h1>
<h1 id="把应用添加到installed_apps中">把应用添加到INSTALLED_APPS中</h1>
<p>from apps.kuser.mysetting import myapp as kuser_app<br>
from apps.blog.mysetting import myapp as blog_app<br>
MY_APPS = blog_app + kuser_app</p>
<h1 id="加载静态文件">加载静态文件</h1>
<p>from apps.blog.mysetting import my_staticfiles as blog_staticfiles<br>
from apps.kuser.mysetting import my_staticfiles as kuser_staticfiles<br>
MY_STATIC_DIRS = blog_staticfiles + kuser_staticfiles</p>
<h1 id="加载模板文件">加载模板文件</h1>
<p>from apps.blog.mysetting import my_templates as blog_templates<br>
from apps.kuser.mysetting import my_templates as kuser_templates<br>
MY_TEMPLATE_DIRS = blog_templates + kuser_templates</p>
<h1 id="密钥配置">密钥配置</h1>
<h1 id="适用于开发环境和部署环境">适用于开发环境和部署环境</h1>
<h1 id="可以从系统环境中配置文件中和硬编码的配置中得到密钥">可以从系统环境中，配置文件中，和硬编码的配置中得到密钥</h1>
<p>try:<br>
SECRET_KEY = os.environ['SECRET_KEY']<br>
except:<br>
try:<br>
with open(os.path.join(PROJECT_ROOT, 'db/secret_key').replace('\', '/')) as f:<br>
SECRET_KEY = f.read().strip()<br>
except:<br>
SECRET_KEY = '*lk<sup>6@0l0(iulgar$j)faff&amp;</sup>(<sup>u+qk3j73d18@&amp;+ur</sup>xuTxY'</p>
<h1 id="得到主机名">得到主机名</h1>
<p>def hostname():<br>
sys = os.name<br>
if sys == 'nt':<br>
hostname = os.getenv('computername')<br>
return hostname<br>
elif sys == 'posix':<br>
host = os.popen('echo $HOSTNAME')<br>
try:<br>
hostname = host.read()<br>
return hostname<br>
finally:<br>
host.close()<br>
else:<br>
raise RuntimeError('Unkwon hostname')<br>
#调试和模板调试配置<br>
#主机名相同则为开发环境，不同则为部署环境<br>
#ALLOWED_HOSTS只在调试环境中才能为空<br>
if socket.gethostname().lower() == hostname().lower():<br>
DEBUG = TEMPLATE_DEBUG = True<br>
ALLOWED_HOSTS = []<br>
else:<br>
ALLOWED_HOSTS = [<br>
'baidu.com',<br>
'0.0.0.0',<br>
]<br>
DEBUG = TEMPLATE_DEBUG = False<br>
#数据库配置<br>
MYDB = {<br>
'mysql': {<br>
'ENGINE': 'django.db.backends.mysql',<br>
'NAME': 'books', #你的数据库名称<br>
'USER': 'root', #你的数据库用户名<br>
'PASSWORD': '', #你的数据库密码<br>
'HOST': '', #你的数据库主机，留空默认为localhost<br>
'PORT': '3306', #你的数据库端口<br>
},<br>
'sqlite': {<br>
'ENGINE': 'django.db.backends.sqlite3',<br>
'NAME': os.path.join(PROJECT_ROOT, 'db/db.sqlite3').replace('\', '/'),<br>
}<br>
}</p>
<h1 id="给静态文件url一个后缀在templates里用到的">给静态文件url一个后缀，在templates里用到的。</h1>
<h1 id="映射到静态文件的url">映射到静态文件的url</h1>
<h1 id="static_url的含义与media_url类似">STATIC_URL的含义与MEDIA_URL类似</h1>
<p>STATIC_URL = '/static/'</p>
<h1 id="总的static目录">总的static目录</h1>
<h1 id="可以使用命令-managepy-collectstatic-自动收集static文件">可以使用命令 manage.py collectstatic 自动收集static文件</h1>
<h1 id="static_root-ospathjoinproject_root-staticreplace">STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static').replace('\', '/')</h1>
<p>#放各个app的static目录及公共的static目录<br>
#STATICFILES_DIRS：和TEMPLATE_DIRS的含义差不多，就是除了各个app的static目录以外还需要管理的静态文件设置，<br>
#比如项目的公共文件差不多。然后给静态文件变量赋值，告诉Django，静态文件在哪里<br>
#另外，Django提供了一个findstatic命令来查找指定的静态文件所在的目录，例如：D:\TestDjango&gt;python manage.py findstatic Chrome.jpg</p>
<h1 id="默认情况下如果没有修改staticfiles_finders的话django首先会在staticfiles_dirs配置的文件夹中寻找静态文件然后再从每个app的static子目录下查找">默认情况下（如果没有修改STATICFILES_FINDERS的话），Django首先会在STATICFILES_DIRS配置的文件夹中寻找静态文件，然后再从每个app的static子目录下查找，</h1>
<h1 id="并且返回找到的第一个文件-所以我们可以将全局的静态文件放在staticfiles_dirs配置的目录中将app独有的静态文件放在app的static子目录中">并且返回找到的第一个文件。所以我们可以将全局的静态文件放在STATICFILES_DIRS配置的目录中，将app独有的静态文件放在app的static子目录中。</h1>
<h1 id="存放的时候按类别存放在static目录的子目录下如图片都放在images文件夹中所有的css都放在css文件夹中所有的js文件都放在js文件夹中">存放的时候按类别存放在static目录的子目录下，如图片都放在images文件夹中，所有的CSS都放在css文件夹中，所有的js文件都放在js文件夹中。</h1>
<p>STATICFILES_DIRS = (<br>
(&quot;downloads&quot;, os.path.join(PROJECT_ROOT, 'static/downloads').replace('\', '/')),<br>
(&quot;uploads&quot;, os.path.join(PROJECT_ROOT, 'static/uploads').replace('\', '/')),<br>
)</p>
<h1 id="将app中的静态文件添加到静态文件配置列表中">将app中的静态文件添加到静态文件配置列表中</h1>
<p>STATICFILES_DIRS += MY_STATIC_DIRS</p>
<h1 id="最后关键的部分是staticfiles_dirs以下配置">最后关键的部分是STATICFILES_DIRS以下配置</h1>
<h1 id="简要说一下static文件夹在项目里有css-js-images-三个文件夹看项目结构他们的路径分别是">简要说一下，static文件夹在项目里，有css js images 三个文件夹（看项目结构），他们的路径分别是：</h1>
<h1 id="ospathjoinstatic_rootcssospathjoinstatic_rootjsospathjoinstatic_rootimages">os.path.join(STATIC_ROOT,'css')，os.path.join(STATIC_ROOT,'js')，os.path.join(STATIC_ROOT,'images')；</h1>
<h1 id="我们分别给他们起三个别名cssjsimages你可以随意给不过为了易记我们原名称指定别名了">我们分别给他们起三个别名css，js，images（你可以随意给，不过为了易记，我们原名称指定别名了）</h1>
<p>TEMPLATE_DIRS = (<br>
os.path.join(PROJECT_ROOT, 'templates').replace('\', '/'),<br>
)</p>
<h1 id="配置应用的模板文件路径">配置应用的模板文件路径</h1>
<p>TEMPLATE_DIRS += MY_TEMPLATE_DIRS</p>
<h1 id="配置缓存">配置缓存</h1>
<p>CACHES = {<br>
'default': {<br>
'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',<br>
'LOCATION': 'unix:/tmp/memcached.sock',<br>
'KEY_PREFIX': 'lcfcn',<br>
'TIMEOUT': None<br>
}<br>
}<br>
LOGIN_REDIRECT_URL = '/'<br>
LOGIN_URL = '/auth/login/'<br>
LOGOUT_URL = '/auth/logout/'</p>
<h1 id="指用户上传的文件比如在model里面的filefieldimagefield上传的文件-如果你定义">指用户上传的文件，比如在Model里面的FileFIeld，ImageField上传的文件。如果你定义</h1>
<h1 id="media_rootctempmedia那么filemodelsfilefieldupload_toabc上传的文件就会被保存到ctempmediaabc-media_root必须是本地路径的绝对路径">MEDIA_ROOT=c:\temp\media，那么File=models.FileField(upload_to=&quot;abc/&quot;)，上传的文件就会被保存到c:\temp\media\abc。MEDIA_ROOT必须是本地路径的绝对路径。</h1>
<p>MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'static/uploads')</p>
<h1 id="media_url是指从浏览器访问时的地址前缀">MEDIA_URL是指从浏览器访问时的地址前缀。</h1>
<p>MEDIA_URL = '/uploads/'</p>
<h1 id="应用注册列表">应用注册列表</h1>
<p>INSTALLED_APPS = (<br>
'django.contrib.admin',<br>
'django.contrib.auth',<br>
'django.contrib.contenttypes',<br>
'django.contrib.sessions',<br>
'django.contrib.messages',<br>
'django.contrib.staticfiles',<br>
'django.contrib.sites',<br>
'django.contrib.sitemaps',<br>
)<br>
#为了不和系统应用混合，自己开发的应用放在这里</p>
<h1 id="将自己写的app添加到应用列表中去">将自己写的app添加到应用列表中去</h1>
<p>INSTALLED_APPS += MY_APPS</p>
<h1 id="django-中间件">django 中间件</h1>
<h1 id="django处理一个request的过程是首先通过django-中间件然后再通过默认的url方式进行的">django处理一个Request的过程是首先通过django 中间件，然后再通过默认的URL方式进行的。</h1>
<h1 id="所以说我们要做的就是在django-中间件这个地方把所有request拦截住">所以说我们要做的就是在django 中间件这个地方把所有Request拦截住，</h1>
<h1 id="用我们自己的方式完成处理以后直接返回response那么我们可以简化原来的设计思路">用我们自己的方式完成处理以后直接返回Response,那么我们可以简化原来的设计思路，</h1>
<h1 id="把中间件不能处理的-request统统不管丢给django去处理">把中间件不能处理的 Request统统不管，丢给Django去处理。</h1>
<p>MIDDLEWARE_CLASSES = (<br>
'django.middleware.cache.UpdateCacheMiddleware',<br>
'django.contrib.sessions.middleware.SessionMiddleware',<br>
'django.middleware.common.CommonMiddleware',<br>
'django.middleware.csrf.CsrfViewMiddleware',<br>
'django.contrib.auth.middleware.AuthenticationMiddleware',</p>
<h1 id="djangocontribauthmiddlewaresessionauthenticationmiddleware">'django.contrib.auth.middleware.SessionAuthenticationMiddleware',</h1>
<p>'django.contrib.messages.middleware.MessageMiddleware',<br>
'django.middleware.clickjacking.XFrameOptionsMiddleware',<br>
'django.middleware.cache.FetchFromCacheMiddleware',<br>
)<br>
ROOT_URLCONF = 'lcforum.urls'<br>
WSGI_APPLICATION = 'lcforum.wsgi.application'<br>
#数据库配置<br>
DATABASES = {<br>
'default': MYDB.get('sqlite'),<br>
}</p>
<h1 id="语言">语言</h1>
<p>LANGUAGE_CODE = 'zh-cn'</p>
<h1 id="时区">时区</h1>
<p>TIME_ZONE = 'Asia/Shanghai'<br>
USE_TZ = True</p>
<h1 id="在template中使用静态文件">在template中使用静态文件</h1>
<h1 id="采用这种方式需要有一些额外配置打开settingspy确认template_context_processors中包含有djangocorecontext_processorsstatic">采用这种方式需要有一些额外配置，打开settings.py，确认TEMPLATE_CONTEXT_PROCESSORS中包含有'django.core.context_processors.static'</h1>
<h1 id="template_context_processors">TEMPLATE_CONTEXT_PROCESSORS = (</h1>
<h1 id="djangocorecontext_processorsdebug">'django.core.context_processors.debug',</h1>
<h1 id="djangocorecontext_processorsi18n">'django.core.context_processors.i18n',</h1>
<h1 id="djangocorecontext_processorsmedia">'django.core.context_processors.media',</h1>
<h1 id="djangocorecontext_processorsstatic">'django.core.context_processors.static',</h1>
<h1 id="djangocontribauthcontext_processorsauth">'django.contrib.auth.context_processors.auth',</h1>
<h1 id="djangocontribmessagescontext_processorsmessages">'django.contrib.messages.context_processors.messages',</h1>
<h1 id=""></h1>
<h1 id="djangocorecontext_processorstz">'django.core.context_processors.tz',</h1>
<h1 id="djangocontribmessagescontext_processorsmessages-2">'django.contrib.messages.context_processors.messages',</h1>
<h1 id="blogcontext_processorscustom_proc自定义函数"># 'blog.context_processors.custom_proc',自定义函数</h1>
<h1 id="-2">)</h1>
<p>#from django.conf import settings<br>
#gettext = lambda s: s<br>
#getattr()</p>
<h1 id="假设有个工程mysite有两个app为blog跟bbs">假设有个工程mysite，有两个app为blog跟bbs</h1>
<h1 id="django处理static的方法是把各个app各自的static合并到一处">django处理static的方法是把各个app各自的static合并到一处</h1>
<h1 id="比如">比如:</h1>
<h1 id="mysitemysitestatic-放置公共静态文件">mysite/mysite/static 放置公共静态文件</h1>
<h1 id="mysitebbsstatic-放置该app自己的静态文件">mysite/bbs/static 放置该app自己的静态文件</h1>
<h1 id="mysiteblogstatic-放置该app自己的静态文件">mysite/blog/static 放置该app自己的静态文件</h1>
<h1 id="可以这么设置">可以这么设置：</h1>
<h1 id="static_root-wwwmysitemysitestatic">STATIC_ROOT = '/www/mysite/mysite/static '</h1>
<h1 id="static_url-static">STATIC_URL = '/static/'</h1>
<h1 id="staticfiles_dirs">STATICFILES_DIRS = (</h1>
<h1 id="mysitestatic">'mysite/static',</h1>
<h1 id="bbsstatic">'bbs/static/',</h1>
<h1 id="blogstatic">'blog/static/',</h1>
<h1 id="-3">)</h1>
<h1 id="使用命令">使用命令</h1>
<h1 id="managepy-collectstatic">manage.py collectstatic</h1>
<h1 id="就会自动把所有静态文件全部复制到static_root中">就会自动把所有静态文件全部复制到STATIC_ROOT中</h1>
<h1 id="如果开启了admin这一步是很必要的不然部署到生产环境的时候会找不到样式文件">如果开启了admin，这一步是很必要的，不然部署到生产环境的时候会找不到样式文件</h1>
<h1 id="不要把你项目的静态文件放到这个目录-这个目录只有在运行python-managepy-collectstatic时才会用到">不要把你项目的静态文件放到这个目录。这个目录只有在运行python manage.py collectstatic时才会用到</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2.0:MVC与MTV开发模式]]></title>
        <id>https://mliank.github.io/M6NbINsbb/</id>
        <link href="https://mliank.github.io/M6NbINsbb/">
        </link>
        <updated>2020-06-04T09:28:26.000Z</updated>
        <content type="html"><![CDATA[<p>了解了，Django的请求与响应这个流程，下面我们一起来做一个简单的Blog文章发布系统：</p>
<p>一、先设计一个简单的数据库，里面只放标题(title)、内容(body)、发布时间(created_time)三个字段。在原来的项目里，我们打开blog/models.py，输入如下代码：</p>
<pre><code>from django.db import models

class Article(models.Model):
    title = models.CharField('标题',max_length=70)
    body = models.TextField('内容', max_length=200, blank=True)
    created_time = models.DateTimeField('发布时间')
    
    class Meta:
        verbose_name = '文章'
        verbose_name_plural = '文章'
        
    def __str__(self):
        return self.title
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/06/04/JfTy6WiBRHFoaxq.png" alt="" loading="lazy"></figure>
<p>之后在Pycharm底部Terminal里输入下面的命令进行数据库迁移：</p>
<pre><code>python manage.py makemigrations
python manage.py migrate
</code></pre>
<p>我们打开blog/admin.py 文件，在里面输入：</p>
<pre><code>from django.contrib import admin
from .models import Article

class ArticleAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'created_time',)
    list_display_links = ('title',)
    
admin.site.register(Article,ArticleAdmin)
</code></pre>
<p>然后我们通过下面的命令创建一个管理员：</p>
<p><code>python manage.py createsuperuser</code><br>
创建管理员的时候，会提示你输入管理员帐号、密码、邮箱。注意，密码不能输入太简单，不然没法通过校检。会提示重新来一次。</p>
<h1 id="运行">运行</h1>
<p><code>python manage.py runserver</code><br>
启动成功，然后我们在浏览器里输入网址：http://127.0.0.1:8000/admin/ 回车，我们就能看到网站管理后台界面。<br>
<img src="https://i.loli.net/2020/06/04/EJTHMjO18xwoNYU.png" alt="" loading="lazy"></p>
<p>二、添加一个URL和添加一个和URL对应的视图函数</p>
<p>文章增加好了，现在我们需要做的是通过输入网址，就能在浏览器里查看到我们增加的文章。</p>
<p>打开项目目录里mysite/urls.py的文件，我们增加一个新的URL，在urlpatterns列表里面增加：</p>
<pre><code>urlpatterns = [
    path('admin/', admin.site.urls),
    path('index', views.hello),
    path('', views.index, name='index'), #+ 新增一个新的URL
    ]
</code></pre>
<p>打开blog/views.py文件，为对应的网址，增加一个响应函数。代码如下：</p>
<pre><code>from django.shortcuts import render
from django.http import HttpResponse
from blog import models

def hello(request):
    return HttpResponse('Hello,world')
    
#下面的代码是新增加的，这个函数主要是把查询的内容渲染到 index.html页面去    
def index(request):
    blog_index = models.Article.objects.all().order_by('-id')
    context = {
        'blog_index':blog_index,
    }
    return render(request, 'index.html',context)
</code></pre>
<p>三、然后在项目目录里的templates文件夹里，新建立一个index.html文件，并输入如下代码：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;博客首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
    &lt;ul&gt;
    &lt;h3&gt;最新文章&lt;/h3&gt;
        {% for x in blog_index %}
        &lt;li&gt;{{ x.title }}&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>打开mysite/settins.py文件，找到TEMPLATES，在'DIRS': [ ],的括号里，把templates添加路径添加进去。</p>
<p><code>os.path.join(BASE_DIR, 'templates'),</code><br>
<img src="https://i.loli.net/2020/06/04/av6IWh1bEtLFs9T.png" alt="" loading="lazy"></p>
<p>注意：如果你的项目是用Pycharm创建的话，这里已经添加过了，不需要重复添加。</p>
<p>现在我们重启Django服务，在浏览器器里，输入网址：http://127.0.0.1:8000/</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2020/06/04/eHgf5Nwqt16LzjP.png" alt="" loading="lazy"></figure>
<p>回车之后，就能在浏览器里看到刚才我们在后台增加的文章。</p>
<p>在上面的例子里，我着重提示了三个地方的操作：models.py文件编辑、views.py文件编辑、templates下的模板文件编辑。那么这个三操作，具体有什么作用呢？</p>
<p>1、models，数据模型：这是一个抽象层，用来构建和操作你的web应用中的数据，模型是你的数据的唯一的、权威的信息源。它包含你所储存数据的必要字段和行为。通常，每个模型对应数据库中唯一的一张表。</p>
<p>2、templates，模板：模板层，负责怎么样显示数据，说白了，就是利用一些格式化的html文件，使数据按照要求显示（显示在哪里，怎么显示等等）。</p>
<p>3、views，视图：用于封装负责处理用户请求及返回响应的逻辑。视图可以看作是前端与数据库的中间人，它会将前端想要的数据从数据库中读出来给前端。他也会将用户要想保存的数据写到数据库。</p>
<p>之后的DjangoWeb开发之后，我们都要按这样的流程，或者说是按照这样的开发模式进行开发。这样的开发模式我们把它叫MVC开发模式。</p>
<p>以下是 Django 中 M、V 和 C 各自的含义：<br>
M ：数据存取部分，由django数据库层处理，本章要讲述的内容。<br>
V：选择显示哪些数据要显示以及怎样显示的部分，由视图和模板处理。<br>
C：根据用户输入委派视图的部分，由 Django 框架根据 URLconf 设置，对给定 URL 调用适当的 Python 函数。</p>
<p>在Django里，由于 C层由框架自行处理，而 Django 里更关注的是模型（Model）、模板(Template)和视图（Views），所以Django 也被称为 MTV框架 。在MTV开发模式中：<br>
M ：代表模型（Model），即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效<br>
T ：代表模板(Template)，即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。<br>
V ：代表视图（View），即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑。 你可以把它看作模型与模板之间的桥梁。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2.0入门教程:请求与响应]]></title>
        <id>https://mliank.github.io/pLIYuFMwj/</id>
        <link href="https://mliank.github.io/pLIYuFMwj/">
        </link>
        <updated>2020-06-04T09:21:10.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/04/NeQhStqRx91lmD3.png" alt="访问的网站的流程图" loading="lazy"><br>
用户在浏览器里输入网址（URL），回车之后就会向目标网址发送一个HTTP请求，服务器收到请求之后就会做出一个响应，把内容通过浏览器渲染出来，呈现给用户看。</p>
<p>下图，就是请求响应的过程。<br>
<img src="https://i.loli.net/2020/06/04/YHjiGPRvskhSqIm.png" alt="请求响应的过程" loading="lazy"></p>
<p>我们在浏览器里输入网址http://127.0.0.1:8000/index，得到了Hello，world。Hello，world就是服务器对这个网址(URL)做出的响应。</p>
<p>这个网址(URL)是从哪得来的呢？这个网址(URL)就是我们自己设置的，就是在项目里的mysite文件夹下的urls.py中。</p>
<pre><code>urlpatterns = [
    path('admin/', admin.site.urls),
    path('index', views.hello),
]
</code></pre>
<p>其中<code>path('index', views.hello),</code>对应的就是URL就是<code>http://127.0.0.1:8000/index</code></p>
<p>URL我们都集中写在一个文件中，每个URL函数都以path、re_path（2.0的写法）的形式写出来，放在urlpatterns列表里，每个URL函数包含三个参数：URL(正规表达式)、对应方法、名称。</p>
<p>这个URL对应的方法是views.hello，这个会给我们返回响应，也就是Hello，world，我们把这个方法方法写在了blog下的views.py文件里。这个方法其实是一个函数，这个函数通过HttpResponse，返回一个字符串'Hello,world'。</p>
<pre><code>def hello(request):
    return HttpResponse('Hello,world')
</code></pre>
<p>每一个URL都会对应一个函数，函数必须存在一个参数，一般约定为request,每个响应(函数)，都对应着一个URL。URL发出请求之后，这个函数就作出相对的响应，把'Hello,world'这个字符串渲染成HTML页面，在浏览器里呈现给用户。这个流程，就是请求与响应的流程，也是Django的处理流程。下面通过一张图片，更形象的的让你了解DJango的处理流程。<br>
<img src="https://i.loli.net/2020/06/04/rAevcfKHUFzQmMs.png" alt="具体流程" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django 2.0]]></title>
        <id>https://mliank.github.io/1cu9hwCAn/</id>
        <link href="https://mliank.github.io/1cu9hwCAn/">
        </link>
        <updated>2020-05-22T04:39:39.000Z</updated>
        <content type="html"><![CDATA[<p>to do</p>
<h1 id="安装">安装</h1>
<h2 id="pip安装">pip安装</h2>
<pre><code>pip install django #安装最新Django
pip install django==2.0.7 #指定版本安装
</code></pre>
<h2 id="检查">检查</h2>
<p><code>pip list</code><br>
或者</p>
<pre><code>import django
print(django.VERSION)
</code></pre>
<h1 id="创建项目">创建项目</h1>
<p>使用 django-admin.py 来创建 HelloWorld 项目：<br>
<code>django-admin.py startproject HelloWorld</code></p>
<h2 id="目录说明">目录说明：</h2>
<ul>
<li>HelloWorld: 项目的容器。</li>
<li>manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>
<li>HelloWorld/<strong>init</strong>.py: 一个空文件，告诉 Python 该目录是一个 Python 包。</li>
<li>HelloWorld/asgi.py: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
<li>HelloWorld/settings.py: 该 Django 项目的设置/配置。</li>
<li>HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站&quot;目录&quot;。</li>
<li>HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
</ul>
<h2 id="运行">运行</h2>
<p><code>python3 manage.py runserver 0.0.0.0:8000</code><br>
<img src="https://i.loli.net/2020/06/04/sUZTzqD1kde4wSl.png" alt="运行" loading="lazy"></p>
<h1 id="创建app">创建app</h1>
<p>使用 manage.py 来创建blog：<br>
<code>python manage.py startapp blog</code><br>
<img src="https://i.loli.net/2020/06/04/skORWuzFLbyh8J9.png" alt="结构" loading="lazy"></p>
<pre><code>blog                 #应用目录
│  admin.py        #对应应用后台管理配置文件。
│  apps.py         #对应应用的配置文件。
│  models.py       #数据模块，数据库设计就在此文件中设计。后面重点讲解
│  tests.py        #自动化测试模块，可在里面编写测试脚本自动化测试
│  views.py        #视图文件，用来执行响应代码的。你在浏览器所见所得都是它处理的。
│  __init__.py
│
├─migrations        #数据迁移、移植文目录，记录数据库操作记录，内容自动生成。
│  │  __init__.py
</code></pre>
<p>应用创建好了，我们需要在项目目录下的mysite文件夹下的settings.py配置文件里的INSTALLED_APPS选项里注册应用。申明blog这个文件夹是一个APP应用。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/06/04/7OlR3yiZWuFSGcN.png" alt="注册应用" loading="lazy"></figure>
<h2 id="修改配置文件">修改配置文件</h2>
<p>在这之前，我们需要设置一下我们的项目文件夹里的mysite目录下的settings.py配置文件，我们需要把语言设置为中文和时区修改为中国时区。<br>
<code>LANGUAGE_CODE = 'zh-hans'</code>和<code>TIME_ZONE = 'Asia/Shanghai'</code><br>
我们在文件尾部：</p>
<pre><code>mysite/mysite/settings.py

# 把语言改为中文
# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'
# 把国际时区改为中国时区
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
</code></pre>
<p>打开 blog 目录下 view.py 文件，在里面输入:</p>
<pre><code>#mysite/blog/views.py
from django.http import HttpResponse

def hello(request):
    return HttpResponse('Hello,world')
</code></pre>
<p>再打开mysite目录下的urls.py文件：</p>
<pre><code>mysite/mysite/urls.py

from django.contrib import admin
from django.urls import path
from blog import views         #+ 
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index', views.hello),   #+
]
</code></pre>
<h2 id="启动">启动</h2>
<p>使用命令<code>python manage.py runserver</code></p>
<p>在浏览器里输入 http://127.0.0.1:8000/index 回车！<br>
<img src="https://i.loli.net/2020/06/04/8FEvQmD7THJsBcX.png" alt="看到了我们期待已久的Hello world. " loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[友情链接]]></title>
        <id>https://mliank.github.io/links/</id>
        <link href="https://mliank.github.io/links/">
        </link>
        <updated>2020-05-22T02:07:27.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/05/29/6EOQdae2jKl4WVM.jpg" alt="有朋自远来" loading="lazy"></figure>
<h2 id="v2ex"><a href="https://www.v2ex.com/">V2EX</a></h2>
<h2 id="光谷社区"><a href="http://www.guanggoo.com/">光谷社区</a></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[视频格式]]></title>
        <id>https://mliank.github.io/shi-pin-ge-shi/</id>
        <link href="https://mliank.github.io/shi-pin-ge-shi/">
        </link>
        <updated>2020-03-12T13:07:39.000Z</updated>
        <content type="html"><![CDATA[<p>ts格式合并代码（mac）<br>
<code>cat *.ts &gt; combine.ts</code><br>
combine：新文件名</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django常用命令和设置]]></title>
        <id>https://mliank.github.io/django/</id>
        <link href="https://mliank.github.io/django/">
        </link>
        <updated>2019-11-22T01:28:53.000Z</updated>
        <content type="html"><![CDATA[<p>admin:<br>
django項目提供給你的一个后台数据库管理界面<br>
数据库生成命令:<br>
makemigrations:执行检查数据库差异，生成迁移文件<br>
migrate :根据迁移文件生成対座的SQL悟句<br>
django默任的自带了一些数据库内容<br>
python manage.py migrate<br>
创建管理界面的超級用戸:<br>
python manage.py createsuperuser<br>
吋区和語言没置:<br>
LANGUAGE_ CODE = ' zh-Hans<br>
TIME_ ZONE = ' Asia/ Shanghai<br>
创建APP :<br>
目录下多了一个文件央<br>
-blog : APP文件名<br>
-init 声明当前文件夹可以是一个模抉<br>
- admin数据庠如果希望被后头，需要在区↑文件下迸行注册<br>
- models 创建该APP下可能使用到的数据库<br>
-test 实现某些測試駆幼I<br>
-views实现対座功能的</p>
<h1 id="django常用命令">Django常用命令</h1>
<p>一些Django常用的命令。</p>
<p>安装Django： pip install django  指定版本 pip3 install django==2.0</p>
<p>新建项目： django-admin.py startproject mysite</p>
<p>新建APP : python manage.py startapp blog</p>
<p>启动：python manage.py runserver 8080</p>
<p>同步或者更改生成 数据库：</p>
<p>python manage.py makemigrations</p>
<p>python manage.py migrate</p>
<p>清空数据库： python manage.py flush</p>
<p>创建管理员： python manage.py createsuperuser</p>
<p>修改用户密码： python manage.py changepassword username</p>
<p>Django项目环境终端： python manage.py shell</p>
<p>这个命令和 直接运行 python 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据的测试非常方便。</p>
<p>更多关于Django的命令在终端输入：python manage.py 查看</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[API分析]]></title>
        <id>https://mliank.github.io/api-fen-xi/</id>
        <link href="https://mliank.github.io/api-fen-xi/">
        </link>
        <updated>2019-11-15T02:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>例子1：<br>
##初始请求<br>
<code>https://api.geetest.com/gettype.php?gt=e8197b3f2a6690ff8f91ec8fc413c5dd&amp;callback=geetest_1573784427741</code></p>
<p>例子2：</p>
<p><code>https://api.geetest.com/get.php?gt=e8197b3f2a6690ff8f91ec8fc413c5dd&amp;challenge=d951852d8da2e87c9b1f79509ae227f5&amp;lang=zh-cn&amp;pt=0&amp;w=EN7c7KXThpRDnduU8ys34EIeJo6gLmpY8(Gc)26AcP9IRywVBVZRe11LfiHTbcUWLBbP41FfWyznGsnAhRx9e4vJoa7dNdwjcBVih0bnr0xVswRq9rnXFqxxrSO6nxT4th6DSosyiCjuIARjHX03(HhVbeuSeSZpzyQgOEs8HHznnENR31Xeem2u0qigRhG0IiQ)hv22hFMROj9OHEjPslNo)8a6dqNAItXVn2yAxCzjQtCG(gwnIH0Pl3IWcW7BdlWVC3O9RDVjm6fQlzLKFOhSTwaQfARkGHh1jHNZmyHKmB8m8j(eGh4Rs3dHyOhj(RYcQXkLrnqURf3vx32cu4vfJC2MXsE66UPFUis6w7IY1efqTN5wUP8G9TrOEpuIGlSf17JcHLBEYPSB4h)gxIiCBbnnjIj9UqKimcL0eE8ALE3dV1AGTeNjgjNqbt(KLOqmDbIA4)4m55ZkwRdk)vMQ0(ttKfUwtqeIGkScZXWWVF)8w0ZbGMgWJW0o3JTaNArkbc2jegHSJMwEGHR7A19MCqshb2Mp(2UwI0vS47hfaXZe1OF1ayFxpmm3QSNGhM733tiB6xYhGCg)Q3uiuyJsdGlPGo65I9airmkmj6UYYIS8yzqLthD0ASudbPRGCIBqMeKdrIbV8K(xdzl68cS6rwKD)h0fiFHIPcIg3DSG8Vl1vG6WPPth1gt3pgY99NKnJnSqNgpCLD7O5KS4wVVb)mH2z2N3W30YrLoPed)Gg6k9eTwaEamQSYVoOv7ABKT8zlRiAF0)Dcg4TL5URDl0I0ldl)U6B6EjYE8eoG1vAzhFi)2AeXNXrh6lLzbH1E1xjdtKXpZlVo31eIifxojcI4ZN(o3LxGO8xlcCBdWAZE15NUrZRbRqZwumpQhLwUHkK6qO57RM)mIhxXktEIQdQqkgymH7yxowLIIiB)QNYlsZBmzPDl3JwZQmNuW9FBgJ(U6dcOm5HGKerRjAdMZf4It5xyHsNeM5uuRxoHjXj5ipiuWUO4coUfXkMhreq)nGtTNZqI3KAzxuDHpX(7cYFUyKQRT4wN9zbd8EUHHRKWjpbYg47H2ykgjzMCMKJKN(FKpagJwZFQD5IKA2I2liq32aX)yvcLbmWrn4Y4HMrW1vTNONN5GDeZw6xeVB5dmkiYCIS7PRsx7eUrrlV2FyKkakyFQUCj8Iz6P5XgozZz6VhOEtnErunxytb0QdpXiL(bgtmwi3RV9Ah8hKVmJwvBsEitnyg8PePlVeE2IhtIZ3aMlD0ydTgtLAFnX65wdT6Qfc1V8VgKPuTR88qyxkq1sXf9Mz60RhhVJe5lZ3QQCmXqGGdXQgtUNgADptlZBHkJQknjsYh0(45xqlAGMPzMsDs7qrLAQxfENrtmtck5CNKgluxT8AWgNQNOBNxtY)qYzA70rlkpJIwbEjrsrTpKKB8D0g)5IsAYonLPHUcM(jDCQzB58sKt5UaylZVzuZ2xW2tSpEjB5bwrDVCDnutnLgv0uOT9bsPXBMCRR8zGNMUppjGkAm8Q5lmVl5l4KBaEOGqSWA9ZCzVfKJurw)sZn0GlLfCXd(zgooHvvZc)eNsEWO9eZiBxQZ09XHd7mk9vQtXdVL9duXTkyE8lwRvItg91ccCrrZqnQACaJWODIlT4rzCIRueutkfNVSdi(XxepAyaS6h8diPDZ)7di2AwcoW4YJ7Tn58HmKLz0yUfILEoSNVydv7NVgbKq7QIrL280r9T)9IAVd)wha3nw(sWlo1(J9JQ9(R3o4sFqcjjWQGwW1WchVH2OyPOcGzW60G0ab(gojvItgb05uA(IncZUd)5U79k(jhPfl8gyCnSj(huErj9EQG5MRKERVU1AwvHDEaD3F)us6GGvReEhjr2mEM0A5HoPyLOGRaaUX7oZRPeQSLl1tyQHSr26bv9qDXUw6Nx4hPLH0esX)emO)p(rHRGkp511ARG5jVDRChhbUZSiTcci6GIqm(S54zX6zc2NnM8itT6YK)97kFTa(hfK95MCCui7xQW9d00M.a5ab4086390f37e3ef6980d71a92c437fd2fb6ce05301a0cc051e5669c5fa18e3915020dfb83627c6eea328c1445b6bf41b89a98494ae6d956299f9571b476963d16097ef48b88ebb5e1d293b35194194bfda792564c17d69be5ef621e197bded8d47c45ec634bf7bb3c459c8470f896c126749b87ffc98dd9651c6acb2c7c70&amp;callback=geetest_1573784428731</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[models模型]]></title>
        <id>https://mliank.github.io/models-mo-xing/</id>
        <link href="https://mliank.github.io/models-mo-xing/">
        </link>
        <updated>2019-11-01T02:20:21.000Z</updated>
        <content type="html"><![CDATA[<p><code>models.py</code></p>
<pre><code>class User(db.Model):
    __tablename__='user'
    id = db.Column(db.Integer,prinmary_key=True)
    name = db.Column(db.String)
    pwd = db.Column(db.String)
    email = db.Column(db.String)
    phone = db.Column(db.String)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python模块]]></title>
        <id>https://mliank.github.io/python-mo-kuai/</id>
        <link href="https://mliank.github.io/python-mo-kuai/">
        </link>
        <updated>2019-10-16T01:25:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="random">random</h2>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; s = random.randint(1,10)
&gt;&gt;&gt; s
2
</code></pre>
<h2 id="os">os</h2>
<p><code>os.getcwd()</code>获得当前目录<br>
<code>os.chdir(path)</code>改变当前目录到新目录<br>
<code>os.listdir(path='.')</code>返回path指定的文件夹包含的文件或文件夹的名字的列表<br>
<code>os.mkdir(path)</code>创建单层目录<br>
<code>os.makedirs(path)</code>递归创建多层目录，如果目录存在抛出异常，注意：'E:\a\b'和'E:\a\c'并不会冲突<br>
<code>os.remove(path)</code>删除文件<br>
<code>os.rmdir(path)</code>删除单层目录<br>
<code>os.removedirs(path)</code>递归删除目录<br>
<code>os.rename(old,new)</code>将文件old重新命名new<br>
<code>os.system(command)</code>运行系统shell命令<br>
<code>os.curdir</code>指代当前目录('.')<br>
<code>os.pardir</code>指代上一级目录('..')</p>
<h3 id="ospath">os.path</h3>
<p><code>os.path.basename(path)</code>去掉目录路径，保留文件名<br>
<code>os.path.dirname(path)</code>去掉文件名，保留路径<br>
<code>os.path.join(path1,path2)</code>将path1，path2各部分组合成一个路径名<br>
<code>os.path.split(path)</code>分割文件名和路径<br>
<code>os.path.splitext(path)</code>分割文件名和扩展名</p>
<pre><code> 
</code></pre>
]]></content>
    </entry>
</feed>